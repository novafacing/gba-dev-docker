<!DOCTYPE HTML>
<html>
<head>
<title>
libtonc: tonc_surface.h File Reference - Tonclib Documentation</title>
<script src="../cdn-cgi/apps/head/MjlXTyhGypAwQFkqZX2sOa_9i4o.js"></script><link rel="alternate" href="documentation.pdf" /><link href="page_styles.css.html" rel="stylesheet" type="text/css" />
<link href="../calibreHtmlOutBasicCss.css" type="text/css" rel="stylesheet" />

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<!--[if lte IE 8]><script src="assets/js/ie/html5shiv.js"></script><![endif]-->
<link rel="stylesheet" href="../assets/css/main.css" />
<link rel="shortcut icon" href="../favicon.ico">
<!--[if lte IE 9]><link rel="stylesheet" href="assets/css/ie9.css" /><![endif]-->
<!--[if lte IE 8]><link rel="stylesheet" href="assets/css/ie8.css" /><![endif]-->
<style>
.collapse > a{
  background: #cdf;
  cursor: pointer;
  display: block;
}
.collapse:focus{
  outline: none;
}
.collapse > div{
  display: none;
}
.collapse:focus div{
  display: block; 
}
</style>
</head>
<body>

<div id="wrapper">

<div id="main">
<div class="inner">

<header id="header">
<a href="https://documentation.help/" class="logo"><strong>documentation</strong>.HELP!</a> Tonclib Documentation </header>

<section>
<h1>libtonc: tonc_surface.h File Reference</h1>
<h4>Tonclib</h4>
<div class="content">
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js" type="6cc2e86cd4248943ec38dfc2-text/javascript"></script>

<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0545639743190253" data-ad-slot="2889760833" data-ad-format="auto"></ins>
<script type="6cc2e86cd4248943ec38dfc2-text/javascript">
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
<div><div class="calibreMain">
<div class="calibreEbookContent">
<div class="calibreEbNavTop">
<a href="tonc__surface_8c.htm" class="calibreAPrev">previous page</a>
<a href="tonc__text_8h.htm" class="calibreANext"> next page</a>
</div>

<div class="tabs">
<ul class="calibre1">
<li class="current"><a href="main.htm" class="calibre4 pcalibre3 pcalibre1 pcalibre2 pcalibre"><span class="calibre5 pcalibre4">Main Page</span></a></li>
<li class="current"><a href="modules.htm" class="calibre4 pcalibre3 pcalibre1 pcalibre2 pcalibre"><span class="calibre5 pcalibre4">Modules</span></a></li>
<li class="current"><a href="classes.htm" class="calibre4 pcalibre3 pcalibre1 pcalibre2 pcalibre"><span class="calibre5 pcalibre4">Data Structures</span></a></li>
<li class="current"><a href="files.htm" class="pcalibre pcalibre3 pcalibre1 pcalibre2 calibre2"><span class="pcalibre4 calibre3">Files</span></a></li>
<li class="current"><a href="pages.htm" class="calibre4 pcalibre3 pcalibre1 pcalibre2 pcalibre"><span class="calibre5 pcalibre4">Related Pages</span></a></li>
</ul>
</div>
<h1 class="calibre6">tonc_surface.h File Reference</h1><code class="calibre29">#include "<a class="pcalibre5 el pcalibre6" href="tonc__memmap_8h.htm">tonc_memmap.h</a>"</code>
<code class="calibre29">#include "<a class="pcalibre5 el pcalibre6" href="tonc__core_8h.htm">tonc_core.h</a>"</code><br class="calibre21" />
<table border="0" cellpadding="0" cellspacing="0" class="calibre17">
<tr class="calibre18"><td class="calibre19" /></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><br class="calibre21" /><h2 class="calibre20">Typedefs</h2></td></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><div class="groupheader">Rendering procedure types</div></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="44d2619c2ee65c2b73318e96fc8df760"></a>
typedef u32(* </td><td class="memitemright"><b class="calibre22">fnGetPixel</b> )(const TSurface *src, int x, int y)</td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="d60e745d3a9e2eb585f44c102218dd53"></a>
typedef void(* </td><td class="memitemright"><b class="calibre22">fnPlot</b> )(const TSurface *dst, int x, int y, u32 clr)</td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="b60b0df08761470abf6ab4e7248911d0"></a>
typedef void(* </td><td class="memitemright"><b class="calibre22">fnHLine</b> )(const TSurface *dst, int x1, int y, int x2, u32 clr)</td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="c07b3f39a725fd0c429d25918b792d0b"></a>
typedef void(* </td><td class="memitemright"><b class="calibre22">fnVLine</b> )(const TSurface *dst, int x, int y1, int y2, u32 clr)</td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="b9d9883c653c15a1dde20a5ac8065ac8"></a>
typedef void(* </td><td class="memitemright"><b class="calibre22">fnLine</b> )(const TSurface *dst, int x1, int y1, int x2, int y2, u32 clr)</td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="078b91a3513c35853b5c69c9e0c0b7fc"></a>
typedef void(* </td><td class="memitemright"><b class="calibre22">fnRect</b> )(const TSurface *dst, int left, int top, int right, int bottom, u32 clr)</td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="59f0d4866009cf3da19c8700cc376888"></a>
typedef void(* </td><td class="memitemright"><b class="calibre22">fnFrame</b> )(const TSurface *dst, int left, int top, int right, int bottom, u32 clr)</td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="a039b4b15f8d7cc953e50503691f21a0"></a>
typedef void(* </td><td class="memitemright"><b class="calibre22">fnBlit</b> )(const TSurface *dst, int dstX, int dstY, uint width, uint height, const TSurface *src, int srcX, int srcY)</td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="cf9994adc6a09c6e2682ab76ccf4c355"></a>
typedef void(* </td><td class="memitemright"><b class="calibre22">fnFlood</b> )(const TSurface *dst, int x, int y, u32 clr)</td></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><br class="calibre21" /><h2 class="calibre20">Enumerations</h2></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">enum  </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSurface.htm#g648b4661eb1ae22c943458db7b02d612">ESurfaceType</a> { <br class="calibre21" />
  <a class="pcalibre5 el pcalibre6" href="group__grpSurface.htm#gg648b4661eb1ae22c943458db7b02d6129cfea2dfceebe372f6d23195679e1cc5">SRF_NONE</a> = 0,
<a class="pcalibre5 el pcalibre6" href="group__grpSurface.htm#gg648b4661eb1ae22c943458db7b02d612c00ef437c87c2167b275a32768348521">SRF_BMP16</a> = 1,
<a class="pcalibre5 el pcalibre6" href="group__grpSurface.htm#gg648b4661eb1ae22c943458db7b02d6126b2e22bb3f91e54e24bd31f7a8a50228">SRF_BMP8</a> = 2,
<a class="pcalibre5 el pcalibre6" href="group__grpSurface.htm#gg648b4661eb1ae22c943458db7b02d6127f2c2b1ce67b72e20f6ea35b713efdeb">SRF_CHR4R</a> = 4,
<br class="calibre21" />
  <a class="pcalibre5 el pcalibre6" href="group__grpSurface.htm#gg648b4661eb1ae22c943458db7b02d61290a348dc887ca488cc0aa18636453264">SRF_CHR4C</a> = 5,
<a class="pcalibre5 el pcalibre6" href="group__grpSurface.htm#gg648b4661eb1ae22c943458db7b02d6124bcdaca2be2f8ac6e0a0d46dba406418">SRF_CHR8</a> = 6,
<a class="pcalibre5 el pcalibre6" href="group__grpSurface.htm#gg648b4661eb1ae22c943458db7b02d61273730c997fbaa327d3dd53a4c96c394d">SRF_ALLOCATED</a> = 0x80
<br class="calibre21" />
}</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Surface types. <a href="group__grpSurface.htm#g648b4661eb1ae22c943458db7b02d612" class="pcalibre5 pcalibre6 calibre8">More...</a><br class="calibre21" /></td></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><br class="calibre21" /><h2 class="calibre20">Functions</h2></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSurface.htm#g775c5181aba0087cb2c0133ea8d3885c">srf_init</a> (TSurface *srf, enum <a class="pcalibre5 el pcalibre6" href="group__grpSurface.htm#g648b4661eb1ae22c943458db7b02d612">ESurfaceType</a> type, const void *data, uint width, uint height, uint bpp, u16 *pal)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Initalize a surface for <em class="calibre27">type</em> formatted graphics. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g205bd8b3723b66b0e2d685170647581f"></a>
void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSurface.htm#g205bd8b3723b66b0e2d685170647581f">srf_pal_copy</a> (const TSurface *dst, const TSurface *src, uint count)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Copy <em class="calibre27">count</em> colors from <em class="calibre27">src's</em> palette to <em class="calibre27">dst's</em> palette. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g8d01b2f0135320e7b13847bbfd36c2c2"></a>
void * </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSurface.htm#g8d01b2f0135320e7b13847bbfd36c2c2">srf_get_ptr</a> (const TSurface *srf, uint x, uint y)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Get the byte address of coordinates (<em class="calibre27">x</em>, <em class="calibre27">y</em>) on the surface. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">INLINE uint </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSurface.htm#g9be7f9468dbdbfe2fbfae56363b1e4c4">srf_align</a> (uint width, uint bpp)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Get the word-aligned number of bytes for a scanline. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g15e841431780f7d4c0734a295cc829bf"></a>
INLINE void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSurface.htm#g15e841431780f7d4c0734a295cc829bf">srf_set_ptr</a> (TSurface *srf, const void *ptr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Set Data-pointer surface for <em class="calibre27">srf</em>. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="ga69f8dde433ca79b2df78df758934888"></a>
INLINE void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSurface.htm#ga69f8dde433ca79b2df78df758934888">srf_set_pal</a> (TSurface *srf, const u16 *pal, uint size)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Set the palette pointer and its size. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g7516c4c9589261da8ab65cdfef5b5999"></a>
INLINE void * </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSurface.htm#g7516c4c9589261da8ab65cdfef5b5999">_srf_get_ptr</a> (const TSurface *srf, uint x, uint y, uint stride)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Inline and semi-safe version of <a class="pcalibre5 el pcalibre6" href="group__grpSurface.htm#g8d01b2f0135320e7b13847bbfd36c2c2" title="Get the byte address of coordinates (x, y) on the surface.">srf_get_ptr()</a>. Use with caution. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp16.htm#ga31208246ace11174dcb8e1e9725ebdd">sbmp16_get_pixel</a> (const TSurface *src, int x, int y)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Get the pixel value of <em class="calibre27">src</em> at (<em class="calibre27">x</em>, <em class="calibre27">y</em>). <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp16.htm#g1d5ac5aa75d7ec6f450f37e5a82ca9ad">sbmp16_plot</a> (const TSurface *dst, int x, int y, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Plot a single pixel on a 16-bit buffer. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp16.htm#g6615a3be2aa2f01dacb5363a85378481">sbmp16_hline</a> (const TSurface *dst, int x1, int y, int x2, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a horizontal line on an 16bit buffer. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp16.htm#gc9c6757dea30bbef2a4c7a34a40c05a3">sbmp16_vline</a> (const TSurface *dst, int x, int y1, int y2, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a vertical line on an 16bit buffer. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp16.htm#gc042144a2ac5450da721f6f6471b4bd2">sbmp16_line</a> (const TSurface *dst, int x1, int y1, int x2, int y2, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a line on an 16bit buffer. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp16.htm#g45b7f47d1285456204ad312bb927edeb">sbmp16_rect</a> (const TSurface *dst, int left, int top, int right, int bottom, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a rectangle in 16bit mode. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp16.htm#g56c912cf1361310ea1ad5b8a0a7c1e1e">sbmp16_frame</a> (const TSurface *dst, int left, int top, int right, int bottom, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a rectangle in 16bit mode. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp16.htm#gd4675df5bcfffe0c8f173864a7cb2079">sbmp16_blit</a> (const TSurface *dst, int dstX, int dstY, uint width, uint height, const TSurface *src, int srcX, int srcY)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">16bpp blitter. Copies a rectangle from one surface to another. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp16.htm#gcf5097d75a0166f9ead03eebb5475c03">sbmp16_floodfill</a> (const TSurface *dst, int x, int y, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Floodfill an area of the same color with new color <em class="calibre27">clr</em>. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g4f7267288657e9ba6a2add9aabb0136f"></a>
INLINE void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp16.htm#g4f7267288657e9ba6a2add9aabb0136f">_sbmp16_plot</a> (const TSurface *dst, int x, int y, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Plot a single pixel on a 16-bit buffer; inline version. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="gfe13538316fde16e827d7e74fea92bbc"></a>
INLINE u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp16.htm#gfe13538316fde16e827d7e74fea92bbc">_sbmp16_get_pixel</a> (const TSurface *src, int x, int y)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Get the pixel value of <em class="calibre27">src</em> at (<em class="calibre27">x</em>, <em class="calibre27">y</em>); inline version. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp8.htm#g7e2eb397e79cc7de9a8a20f40e48a9e3">sbmp8_get_pixel</a> (const TSurface *src, int x, int y)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Get the pixel value of <em class="calibre27">src</em> at (<em class="calibre27">x</em>, <em class="calibre27">y</em>). <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp8.htm#gf11c57ccae4f6a4a8650022692201669">sbmp8_plot</a> (const TSurface *dst, int x, int y, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Plot a single pixel on a 8-bit buffer. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp8.htm#gd925a9c671471a067b8c3d2d6980f24f">sbmp8_hline</a> (const TSurface *dst, int x1, int y, int x2, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a horizontal line on an 8-bit buffer. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp8.htm#g9fd7423775f60058ef567c822c760cd2">sbmp8_vline</a> (const TSurface *dst, int x, int y1, int y2, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a vertical line on an 8-bit buffer. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp8.htm#geac238b4fd79ad2daabdc98c818f62f7">sbmp8_line</a> (const TSurface *dst, int x1, int y1, int x2, int y2, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a line on an 8-bit buffer. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp8.htm#g1d3859acc074497a2a5f68f33c91093d">sbmp8_rect</a> (const TSurface *dst, int left, int top, int right, int bottom, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a rectangle in 8-bit mode. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp8.htm#g1aa3f2e4aaffaf79011f9ee7b20452a7">sbmp8_frame</a> (const TSurface *dst, int left, int top, int right, int bottom, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a rectangle in 8-bit mode. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp8.htm#g0af7716e3a985af84def73d5ce70726b">sbmp8_blit</a> (const TSurface *dst, int dstX, int dstY, uint width, uint height, const TSurface *src, int srcX, int srcY)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">16bpp blitter. Copies a rectangle from one surface to another. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp8.htm#g4284de8744e5a6114733140f2123c241">sbmp8_floodfill</a> (const TSurface *dst, int x, int y, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Floodfill an area of the same color with new color <em class="calibre27">clr</em>. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="ga962987eb1416b258982ffb3ba9549df"></a>
INLINE void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp8.htm#ga962987eb1416b258982ffb3ba9549df">_sbmp8_plot</a> (const TSurface *dst, int x, int y, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Plot a single pixel on a 8-bit surface; inline version. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g0a6ffbd95edec61dd6f5d791d4bd4fde"></a>
INLINE u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSbmp8.htm#g0a6ffbd95edec61dd6f5d791d4bd4fde">_sbmp8_get_pixel</a> (const TSurface *src, int x, int y)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Get the pixel value of <em class="calibre27">src</em> at (<em class="calibre27">x</em>, <em class="calibre27">y</em>); inline version. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4c.htm#g07f63e16ca49e0a64d3c2e8d16f9610a">schr4c_get_pixel</a> (const TSurface *src, int x, int y)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Get the pixel value of <em class="calibre27">src</em> at (<em class="calibre27">x</em>, <em class="calibre27">y</em>). <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4c.htm#g4af2308a12472f5bfbf023d6e39aae66">schr4c_plot</a> (const TSurface *dst, int x, int y, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Plot a single pixel on a 4bpp tiled surface. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4c.htm#g0a512278650c178f068909632dec06ed">schr4c_hline</a> (const TSurface *dst, int x1, int y, int x2, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a horizontal line on a 4bpp tiled surface. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4c.htm#gef521b16f409559339a1fb158a9d214b">schr4c_vline</a> (const TSurface *dst, int x, int y1, int y2, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a vertical line on a 4bpp tiled surface. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4c.htm#g58da3179554b75aba28be9f109bc3af6">schr4c_line</a> (const TSurface *dst, int x1, int y1, int x2, int y2, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a line on a 4bpp tiled surface. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4c.htm#gf306fcacf4a5d121039448d756a0c8de">schr4c_rect</a> (const TSurface *dst, int left, int top, int right, int bottom, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Render a rectangle on a 4bpp tiled canvas. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4c.htm#g60d96a4e3e0fb0855c864284be3655b7">schr4c_frame</a> (const TSurface *dst, int left, int top, int right, int bottom, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a rectangle on a 4bpp tiled surface. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4c.htm#g24d877050a9522ec408cd8f8906b9c5b">schr4c_blit</a> (const TSurface *dst, int dstX, int dstY, uint width, uint height, const TSurface *src, int srcX, int srcY)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Blitter for 4bpp tiled surfaces. Copies a rectangle from one surface to another. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4c.htm#ga33f0b3d21aafea635ba97fc57b4d8c7">schr4c_floodfill</a> (const TSurface *dst, int x, int y, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Floodfill an area of the same color with new color <em class="calibre27">clr</em>. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4c.htm#gad003494407bae5a96c364e46355fac9">schr4c_prep_map</a> (const TSurface *srf, u16 *map, u16 se0)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Prepare a screen-entry map for use with chr4. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g9c8094dcfb0a8addcb05ecb0064b44af"></a>
u32 * </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4c.htm#g9c8094dcfb0a8addcb05ecb0064b44af">schr4c_get_ptr</a> (const TSurface *srf, int x, int y)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Special pointer getter for chr4: start of in-tile line. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="gab13ca497179bb85f145da1ebe2d366f"></a>
INLINE void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4c.htm#gab13ca497179bb85f145da1ebe2d366f">_schr4c_plot</a> (const TSurface *dst, int x, int y, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Plot a single pixel on a 4bpp tiled,col-jamor surface; inline version. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="gfcadb54fe40422f4c64fac52e484e913"></a>
INLINE u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4c.htm#gfcadb54fe40422f4c64fac52e484e913">_schr4c_get_pixel</a> (const TSurface *src, int x, int y)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Get the pixel value of <em class="calibre27">src</em> at (<em class="calibre27">x</em>, <em class="calibre27">y</em>); inline version. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4r.htm#gdca559503cb658b54e83a864530f2d75">schr4r_get_pixel</a> (const TSurface *src, int x, int y)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Get the pixel value of <em class="calibre27">src</em> at (<em class="calibre27">x</em>, <em class="calibre27">y</em>). <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4r.htm#g2876b301bf8b8502c4d7b94b1d9e97a5">schr4r_plot</a> (const TSurface *dst, int x, int y, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Plot a single pixel on a 4bpp tiled surface. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4r.htm#gdb2c64c78a4ef63ea26174cf6ababb77">schr4r_hline</a> (const TSurface *dst, int x1, int y, int x2, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a horizontal line on a 4bpp tiled surface. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4r.htm#g416302d1aac4ea2315249820db1db458">schr4r_vline</a> (const TSurface *dst, int x, int y1, int y2, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a vertical line on a 4bpp tiled surface. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4r.htm#g47f06b7080f50169681eb1213e50bf1b">schr4r_line</a> (const TSurface *dst, int x1, int y1, int x2, int y2, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a line on a 4bpp tiled surface. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4r.htm#g3e28aa9b7944b7f872cda8b96cadc49c">schr4r_rect</a> (const TSurface *dst, int left, int top, int right, int bottom, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Render a rectangle on a tiled canvas. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4r.htm#gfedc31ca31a2b5d49ea4715c28cdf5b9">schr4r_frame</a> (const TSurface *dst, int left, int top, int right, int bottom, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Draw a rectangle on a 4bpp tiled surface. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4r.htm#g08d8dca7bcbc41a09a82ea3a0feb385d">schr4r_prep_map</a> (const TSurface *srf, u16 *map, u16 se0)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Prepare a screen-entry map for use with chr4. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="gaeeb8803e471605c75f44384c35e8d77"></a>
u32 * </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4r.htm#gaeeb8803e471605c75f44384c35e8d77">schr4r_get_ptr</a> (const TSurface *srf, int x, int y)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Special pointer getter for chr4: start of in-tile line. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="gf6fcfdec0ab7066dab5d698bfbf8e42f"></a>
INLINE void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4r.htm#gf6fcfdec0ab7066dab5d698bfbf8e42f">_schr4r_plot</a> (const TSurface *dst, int x, int y, u32 clr)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Plot a single pixel on a 4bpp tiled,row-major surface; inline version. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g7e9af947ebb4c0691c99732541bb71de"></a>
INLINE u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpSchr4r.htm#g7e9af947ebb4c0691c99732541bb71de">_schr4r_get_pixel</a> (const TSurface *src, int x, int y)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Get the pixel value of <em class="calibre27">src</em> at (<em class="calibre27">x</em>, <em class="calibre27">y</em>); inline version. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><br class="calibre21" /><h2 class="calibre20">Variables</h2></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="4c46311a233852911fb40174d0e71f1b"></a>
const TSurface </td><td class="memitemright"><b class="calibre22">m3_surface</b></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="8cbc13118b72169acb4da70d9c475c79"></a>
EWRAM_DATA TSurface </td><td class="memitemright"><b class="calibre22">m4_surface</b></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="cefa90b2ac5488222380969eaf0d8c07"></a>
EWRAM_DATA TSurface </td><td class="memitemright"><b class="calibre22">m5_surface</b></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="092b6dc35006aeb0765a47f69b2c9f07"></a>
const TSurfaceProcTab </td><td class="memitemright"><b class="calibre22">bmp16_tab</b></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="c30befbb4f1dbed75414828ba9fa0273"></a>
const TSurfaceProcTab </td><td class="memitemright"><b class="calibre22">bmp8_tab</b></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="3d8274b20e02014654816aba8e2ebbed"></a>
const TSurfaceProcTab </td><td class="memitemright"><b class="calibre22">chr4c_tab</b></td></tr>
</table>
<hr class="calibre9" /><a name="_details" class="pcalibre5 pcalibre6 calibre8"></a><h2 class="calibre20">Detailed Description</h2>
<dl class="calibre7" compact="compact"><dt class="calibre21"><b class="calibre22">Author:</b></dt><dd class="calibre23">J Vijn </dd></dl>
<dl class="calibre7" compact="compact"><dt class="calibre21"><b class="calibre22">Date:</b></dt><dd class="calibre23">20080119 - 20080514 </dd></dl>
<hr size="1" class="calibre9" /><address class="calibre10"><small class="calibre11">Generated on Mon Aug 25 17:03:56 2008 for libtonc by 
<a href="http://www.doxygen.org/index.html" class="pcalibre5 pcalibre6 calibre8">
<img src="doxygen.png" alt="doxygen" border="0" class="calibre12" /></a> 1.5.3 </small></address>
</div>
<div class="calibreEbNav">
<a href="tonc__surface_8c.htm" class="calibreAPrev">previous page</a>
<a href="index.html" class="calibreAHome"> start</a>
<a href="tonc__text_8h.htm" class="calibreANext"> next page</a>
</div>
</div>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js" type="6cc2e86cd4248943ec38dfc2-text/javascript"></script>

<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0545639743190253" data-ad-slot="2889760833" data-ad-format="auto"></ins>
<script type="6cc2e86cd4248943ec38dfc2-text/javascript">
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</table>
</div>
</section>

</div>
</div>


<div id="sidebar">
<div class="inner">


 <nav id="menu">
 <header class="major">
<h2>Menu</h2>
</header>
<ul>
<li><a href="https://documentation.help/">Homepage</a></li> 
</ul>
<div><div class="calibreTocIndex">
<h2> Table of contents</h2>
<div>
<ul>
<li>
<a href="main.htm">Tonclib 1.4 (20080825)</a>
</li>
<li>
<a href="modules.htm">Modules</a>
<ul>
<li>
<a href="group__grpBios.htm">Bios Calls</a>
<ul>
<li>
<a href="group__grpBiosDef.htm">BIOS informalities</a>
</li>
<li>
<a href="group__grpBiosMain.htm">BIOS functions</a>
</li>
<li>
<a href="group__grpBiosEx.htm">More BIOS functions</a>
</li>
</ul>
</li>
<li>
<a href="group__grpCore.htm">Core</a>
<ul>
<li>
<a href="group__grpCoreBit.htm">Bit(field) macros</a>
</li>
<li>
<a href="group__grpData.htm">Data routines</a>
</li>
<li>
<a href="group__grpCoreMisc.htm">Miscellaneous routines</a>
</li>
<li>
<a href="group__grpNocash.htm">no$gba debugging</a>
</li>
</ul>
</li>
<li>
<a href="group__grpDma.htm">DMA</a>
</li>
<li>
<a href="group__grpInput.htm">Input</a>
</li>
<li>
<a href="group__grpIrq.htm">Interrupt</a>
</li>
<li>
<a href="group__grpMath.htm">Math</a>
<ul>
<li>
<a href="group__grpMathBase.htm">Base math</a>
</li>
<li>
<a href="group__grpMathFixed.htm">Fixed point math</a>
</li>
<li>
<a href="group__grpMathLut.htm">Look-up tables</a>
</li>
<li>
<a href="group__grpMathPoint.htm">Point functions</a>
</li>
<li>
<a href="group__grpMathVector.htm">Vector functions</a>
</li>
<li>
<a href="group__grpMathRect.htm">Rect functions</a>
</li>
</ul>
</li>
<li>
<a href="group__grpMemmap.htm">Memory Map</a>
<ul>
<li>
<a href="group__grpMemBits.htm">Memory map bit(fields)</a>
<ul>
<li>
<a href="group__grpVideoDCNT.htm">Display Control Flags</a>
</li>
<li>
<a href="group__grpVideoDSTAT.htm">Display Status Flags</a>
</li>
<li>
<a href="group__grpVideoBGCNT.htm">Background Control Flags</a>
</li>
<li>
<a href="group__grpVideoGfx.htm">Graphic effects</a>
</li>
<li>
<a href="group__grpVideoBLD.htm">Blend Flags</a>
</li>
<li>
<a href="group__grpAudioSSW.htm">Tone Generator, Sweep Flags</a>
</li>
<li>
<a href="group__grpAudioSSQR.htm">Tone Generator, Square Flags</a>
</li>
<li>
<a href="group__grpAudioSFREQ.htm">Tone Generator, Frequency Flags</a>
</li>
<li>
<a href="group__grpAudioSDMG.htm">Tone Generator, Control Flags</a>
</li>
<li>
<a href="group__grpAudioSDS.htm">Direct Sound Flags</a>
</li>
<li>
<a href="group__grpAudioSSTAT.htm">Sound Status Flags</a>
</li>
<li>
<a href="group__grpAudioDMA.htm">DMA Control Flags</a>
</li>
<li>
<a href="group__grpTimerTM.htm">Timer Control Flags</a>
</li>
<li>
<a href="group__grpSioCnt.htm">Serial I/O Control</a>
</li>
<li>
<a href="group__grpCommR.htm">Comm control.</a>
</li>
<li>
<a href="group__grpInputKEY.htm">Key Flags</a>
</li>
<li>
<a href="group__grpInputKCNT.htm">Key Control Flags</a>
</li>
<li>
<a href="group__grpIrqIRQ.htm">Interrupt Flags</a>
</li>
<li>
<a href="group__grpMiscWS.htm">Waitstate Control Flags</a>
</li>
<li>
<a href="group__grpVideoSE.htm">Screen-entry Flags</a>
</li>
<li>
<a href="group__grpVideoAttr0.htm">Object Attribute 0 Flags</a>
</li>
<li>
<a href="group__grpVideoAttr1.htm">Object Attribute 1 Flags</a>
</li>
<li>
<a href="group__grpVideoAttr2.htm">Object Attribute 2 Flags</a>
</li>
</ul>
</li>
<li>
<a href="group__grpMemArray.htm">Memory mapped arrays</a>
</li>
<li>
<a href="group__grpReg.htm">IO Registers</a>
</li>
<li>
<a href="group__grpRegAlt.htm">IO Alternates</a>
</li>
</ul>
</li>
<li>
<a href="group__grpAudio.htm">Sound</a>
</li>
<li>
<a href="group__grpTTE.htm">Tonc Text Engine</a>
<ul>
<li>
<a href="group__grpTTEOps.htm">Operations</a>
</li>
<li>
<a href="group__grpTTEAttr.htm">Attributes</a>
</li>
<li>
<a href="group__grpTTEConio.htm">Console IO</a>
</li>
<li>
<a href="group__grpTTEMap.htm">Tilemap text</a>
</li>
<li>
<a href="group__grpTTEChr4c.htm">Character text, column-major</a>
</li>
<li>
<a href="group__grpTTEChr4r.htm">Character text, row-major</a>
</li>
<li>
<a href="group__grpTTEBmp.htm">Bitmap text</a>
</li>
<li>
<a href="group__grpTTEObj.htm">Object text</a>
</li>
</ul>
</li>
<li>
<a href="group__grpText.htm">Old Text</a>
<ul>
<li>
<a href="group__grpTextTile.htm">Tilemap text</a>
</li>
 <li>
<a href="group__grpTextBm.htm">Bitmap text</a>
</li>
<li>
<a href="group__grpTextObj.htm">Object text</a>
</li>
</ul>
</li>
<li>
<a href="group__grpTimer.htm">Timer</a>
</li>
<li>
<a href="group__grpVideo.htm">Video</a>
<ul>
<li>
<a href="group__grpSurface.htm">Surface functions</a>
<ul>
<li>
<a href="group__grpSbmp16.htm">16bpp bitmap surfaces</a>
</li>
<li>
<a href="group__grpSbmp8.htm">8bpp bitmap surfaces</a>
</li>
<li>
<a href="group__grpSchr4c.htm">4bpp tiled surfaces, column major</a>
</li>
<li>
<a href="group__grpSchr4r.htm">4bpp tiled surfaces, row major</a>
</li>
</ul>
</li>
<li>
<a href="group__grpVideoPal.htm">Colors</a>
</li>
<li>
<a href="group__grpVideoBg.htm">Tiled Backgrounds</a>
</li>
<li>
<a href="group__grpVideoBmp.htm">Bitmaps</a>
</li>
<li>
<a href="group__grpVideoObj.htm">Objects</a>
</li>
<li>
<a href="group__grpVideoAffine.htm">Affine functions</a>
</li>
</ul>
</li>
<li>
<a href="group__grpTypes.htm">Types and attributes</a>
<ul>
<li>
<a href="group__grpTypeAttr.htm">Type attributes</a>
</li>
<li>
<a href="group__grpTypePrim.htm">Primary types</a>
</li>
<li>
<a href="group__grpTypeSec.htm">Secondary types</a>
</li>
<li>
<a href="group__grpTypeTert.htm">Tertiary types</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="annotated.htm">Data Structures</a>
<ul>
<li>
<a href="structBG__POINT.htm">BG_POINT</a>
</li>
<li>
<a href="structBgAffineDest.htm">BgAffineDest</a>
</li>
<li>
<a href="structBgAffineSource.htm">BgAffineSource</a>
</li>
<li>
<a href="structBLOCK.htm">BLOCK</a>
</li>
<li>
<a href="structBUP.htm">BUP</a>
</li>
<li>
<a href="structDMA__REC.htm">DMA_REC</a>
</li>
<li>
<a href="structIRQ__REC.htm">IRQ_REC</a>
</li>
<li>
<a href="structIRQ__SENDER.htm">IRQ_SENDER</a>
</li>
<li>
<a href="structMultiBootParam.htm">MultiBootParam</a>
</li>
<li>
<a href="structOBJ__AFFINE.htm">OBJ_AFFINE</a>
</li>
<li>
<a href="structOBJ__ATTR.htm">OBJ_ATTR</a>
</li>
<li>
<a href="structObjAffineDest.htm">ObjAffineDest</a>
</li>
<li>
<a href="structObjAffineSource.htm">ObjAffineSource</a>
</li>
<li>
<a href="structPOINT32.htm">POINT32</a>
</li>
<li>
<a href="structRECT32.htm">RECT32</a>
</li>
<li>
<a href="structREPEAT__REC.htm">REPEAT_REC</a>
</li>
<li>
<a href="structTFont.htm">TFont</a>
</li>
<li>
<a href="structTILE.htm">TILE</a>
</li>
<li>
<a href="structTILE8.htm">TILE8</a>
</li>
<li>
<a href="structTMR__REC.htm">TMR_REC</a>
</li>
<li>
<a href="structTTC.htm">TTC</a>
</li>
<li>
<a href="structVECTOR.htm">VECTOR</a>
</li>
</ul>
</li>
<li>
<a href="functions.htm">Data Fields</a>
</li>
<li>
<a href="files.htm">File List</a>
<ul>
<li>
<a href="ase__drawg_8c.htm">ase_drawg.c</a>
</li>
<li>
<a href="bmp16__drawg_8c.htm">bmp16_drawg.c</a>
</li>
<li>
<a href="bmp16__drawg__b1cs_8c.htm">bmp16_drawg_b1cs.c</a>
</li>
<li>
<a href="bmp8__drawg_8c.htm">bmp8_drawg.c</a>
</li>
<li>
<a href="bmp8__drawg__b1cs_8c.htm">bmp8_drawg_b1cs.c</a>
</li>
<li>
<a href="chr4c__drawg__b1cts_8c.htm">chr4c_drawg_b1cts.c</a>
</li>
<li>
<a href="chr4c__drawg__b4cts_8c.htm">chr4c_drawg_b4cts.c</a>
</li>
<li>
<a href="chr4r__drawg__b1cts_8c.htm">chr4r_drawg_b1cts.c</a>
</li>
<li>
<a href="obj__drawg_8c.htm">obj_drawg.c</a>
</li>
<li>
<a href="se__drawg_8c.htm">se_drawg.c</a>
</li>
<li>
<a href="tonc_8h.htm">tonc.h</a>
</li>
<li>
<a href="tonc__bg_8c.htm">tonc_bg.c</a>
</li>
<li>
<a href="tonc__bg__affine_8c.htm">tonc_bg_affine.c</a>
</li>
<li>
<a href="tonc__bios_8h.htm">tonc_bios.h</a>
</li>
<li>
<a href="tonc__bmp16_8c.htm">tonc_bmp16.c</a>
</li>
<li>
<a href="tonc__bmp8_8c.htm">tonc_bmp8.c</a>
</li>
<li>
<a href="tonc__color_8c.htm">tonc_color.c</a>
</li>
<li>
<a href="tonc__core_8c.htm">tonc_core.c</a>
</li>
<li>
<a href="tonc__core_8h.htm">tonc_core.h</a>
</li>
<li>
<a href="tonc__input_8c.htm">tonc_input.c</a>
</li>
<li>
<a href="tonc__input_8h.htm">tonc_input.h</a>
</li>
<li>
<a href="tonc__irq_8c.htm">tonc_irq.c</a>
</li>
<li>
<a href="tonc__irq_8h.htm">tonc_irq.h</a>
</li>
<li>
<a href="tonc__legacy_8h.htm">tonc_legacy.h</a>
</li>
<li>
<a href="tonc__libgba_8h.htm">tonc_libgba.h</a>
</li>
<li>
<a href="tonc__math_8c.htm">tonc_math.c</a>
</li>
<li>
<a href="tonc__math_8h.htm">tonc_math.h</a>
</li>
<li>
<a href="tonc__memdef_8h.htm">tonc_memdef.h</a>
</li>
<li>
<a href="tonc__memmap_8h.htm">tonc_memmap.h</a>
</li>
<li>
<a href="tonc__nocash_8h.htm">tonc_nocash.h</a>
</li>
<li>
<a href="tonc__oam_8c.htm">tonc_oam.c</a>
</li>
<li>
<a href="tonc__oam_8h.htm">tonc_oam.h</a>
</li>
<li>
<a href="tonc__obj__affine_8c.htm">tonc_obj_affine.c</a>
</li>
<li>
<a href="tonc__sbmp16_8c.htm">tonc_sbmp16.c</a>
</li>
<li>
<a href="tonc__sbmp8_8c.htm">tonc_sbmp8.c</a>
</li>
<li>
<a href="tonc__schr4c_8c.htm">tonc_schr4c.c</a>
</li>
<li>
<a href="tonc__schr4r_8c.htm">tonc_schr4r.c</a>
</li>
<li>
<a href="tonc__surface_8c.htm">tonc_surface.c</a>
</li>
<li>
<a href="tonc__surface_8h.htm">tonc_surface.h</a>
</li>
<li>
<a href="tonc__text_8h.htm">tonc_text.h</a>
</li>
<li>
<a href="tonc__tte_8h.htm">tonc_tte.h</a>
</li>
<li>
<a href="tonc__types_8h.htm">tonc_types.h</a>
</li>
<li>
<a href="tonc__video_8c.htm">tonc_video.c</a>
</li>
<li>
<a href="tonc__video_8h.htm">tonc_video.h</a>
</li>
<li>
<a href="tte__init__ase_8c.htm">tte_init_ase.c</a>
</li>
<li>
<a href="tte__init__bmp_8c.htm">tte_init_bmp.c</a>
</li>
<li>
<a href="tte__init__chr4c_8c.htm">tte_init_chr4c.c</a>
</li>
<li>
<a href="tte__init__chr4r_8c.htm">tte_init_chr4r.c</a>
</li>
<li>
<a href="tte__init__obj_8c.htm">tte_init_obj.c</a>
</li>
<li>
<a href="tte__init__se_8c.htm">tte_init_se.c</a>
</li>
<li>
<a href="tte__iohook_8c.htm">tte_iohook.c</a>
</li>
<li>
<a href="tte__main_8c.htm">tte_main.c</a>
</li>
</ul>
</li>
<li>
<a href="globals.htm">Globals</a>
</li>
<li>
<a href="pages.htm">Related Pages</a>
<ul>
<li>
<a href="todo.htm">Todo List</a>
</li>
<li>
<a href="deprecated.htm">Deprecated List</a>
</li>
</ul>
</li>
</ul>
</div>
</div>
</div>
</nav>


<section>
<header class="major">
<h2>Get in touch</h2>
</header>
<p>Submit feedback about this site to:</p>
<ul class="contact">
<li class="fa-envelope-o"><a href="https://documentation.help/cdn-cgi/l/email-protection#c8a0ada4b8aca7abbb88baada0a5a9a6a6e6aba7"><span class="__cf_email__" data-cfemail="264e434a56424945556654434e4b474848084549">[email&#160;protected]</span></a></li>
</ul>
</section>

<footer id="footer">
<p class="copyright">&copy; <a href="https://documentation.help">documentation.help</a>. Design: <a href="https://rehmann.co">rehmann.co</a>.</p>
<ul class="icons">

</ul>
</footer>
</div>
</div>
</div>

<script data-cfasync="false" src="../cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script src="../assets/js/jquery.min.js" type="6cc2e86cd4248943ec38dfc2-text/javascript"></script>
<script src="../assets/js/skel.min.js" type="6cc2e86cd4248943ec38dfc2-text/javascript"></script>
<script src="../assets/js/util.js" type="6cc2e86cd4248943ec38dfc2-text/javascript"></script>
<!--[if lte IE 8]><script src="assets/js/ie/respond.min.js"></script><![endif]-->
<script src="../assets/js/main.js" type="6cc2e86cd4248943ec38dfc2-text/javascript"></script>
<script src="https://ajax.cloudflare.com/cdn-cgi/scripts/7089c43e/cloudflare-static/rocket-loader.min.js" data-cf-settings="6cc2e86cd4248943ec38dfc2-|49" defer=""></script></body>
</html>
