<!DOCTYPE HTML>
<html>
<head>
<title>
libtonc: tonc_core.h File Reference - Tonclib Documentation</title>
<script src="../cdn-cgi/apps/head/MjlXTyhGypAwQFkqZX2sOa_9i4o.js"></script><link rel="alternate" href="documentation.pdf" /><link href="page_styles.css.html" rel="stylesheet" type="text/css" />
<link href="../calibreHtmlOutBasicCss.css" type="text/css" rel="stylesheet" />

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<!--[if lte IE 8]><script src="assets/js/ie/html5shiv.js"></script><![endif]-->
<link rel="stylesheet" href="../assets/css/main.css" />
<link rel="shortcut icon" href="../favicon.ico">
<!--[if lte IE 9]><link rel="stylesheet" href="assets/css/ie9.css" /><![endif]-->
<!--[if lte IE 8]><link rel="stylesheet" href="assets/css/ie8.css" /><![endif]-->
<style>
.collapse > a{
  background: #cdf;
  cursor: pointer;
  display: block;
}
.collapse:focus{
  outline: none;
}
.collapse > div{
  display: none;
}
.collapse:focus div{
  display: block; 
}
</style>
</head>
<body>

<div id="wrapper">

<div id="main">
<div class="inner">

<header id="header">
<a href="https://documentation.help/" class="logo"><strong>documentation</strong>.HELP!</a> Tonclib Documentation </header>

<section>
<h1>libtonc: tonc_core.h File Reference</h1>
<h4>Tonclib</h4>
<div class="content">
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js" type="7e6d58c848246f96dae0f3c7-text/javascript"></script>

<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0545639743190253" data-ad-slot="2889760833" data-ad-format="auto"></ins>
<script type="7e6d58c848246f96dae0f3c7-text/javascript">
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
<div><div class="calibreMain">
<div class="calibreEbookContent">
<div class="calibreEbNavTop">
<a href="tonc__core_8c.htm" class="calibreAPrev">previous page</a>
<a href="tonc__input_8c.htm" class="calibreANext"> next page</a>
</div>

<div class="tabs">
<ul class="calibre1">
<li class="current"><a href="main.htm" class="calibre4 pcalibre3 pcalibre1 pcalibre2 pcalibre"><span class="calibre5 pcalibre4">Main Page</span></a></li>
<li class="current"><a href="modules.htm" class="calibre4 pcalibre3 pcalibre1 pcalibre2 pcalibre"><span class="calibre5 pcalibre4">Modules</span></a></li>
<li class="current"><a href="classes.htm" class="calibre4 pcalibre3 pcalibre1 pcalibre2 pcalibre"><span class="calibre5 pcalibre4">Data Structures</span></a></li>
<li class="current"><a href="files.htm" class="pcalibre pcalibre3 pcalibre1 pcalibre2 calibre2"><span class="pcalibre4 calibre3">Files</span></a></li>
<li class="current"><a href="pages.htm" class="calibre4 pcalibre3 pcalibre1 pcalibre2 pcalibre"><span class="calibre5 pcalibre4">Related Pages</span></a></li>
</ul>
</div>
<h1 class="calibre6">tonc_core.h File Reference</h1><code class="calibre29">#include "<a class="pcalibre5 el pcalibre6" href="tonc__memmap_8h.htm">tonc_memmap.h</a>"</code>
<code class="calibre29">#include "<a class="pcalibre5 el pcalibre6" href="tonc__memdef_8h.htm">tonc_memdef.h</a>"</code><br class="calibre21" />
<table border="0" cellpadding="0" cellspacing="0" class="calibre17">
<tr class="calibre18"><td class="calibre19" /></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><br class="calibre21" /><h2 class="calibre20">Copying and filling routines</h2></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g38ee92b3067cfe67dfdb6e5b3f477558"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#g38ee92b3067cfe67dfdb6e5b3f477558">GRIT_CPY</a>(dst, name)   memcpy16(dst, name, name##Len/2)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Simplified copier for GRIT-exported data. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void * </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#g63fd89462bc41ee9a450d8dd10d4fac5">tonccpy</a> (void *dst, const void *src, uint size)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">VRAM-safe cpy. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void * </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#g5cd7eab7b8539ee1cd66232e7fc6f0c6">__toncset</a> (void *dst, u32 fill, uint size)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">VRAM-safe memset, internal routine. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g68a3d6abff4194d1debbd024b3059fc3"></a>
INLINE void * </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#g68a3d6abff4194d1debbd024b3059fc3">toncset</a> (void *dst, u8 src, uint count)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">VRAM-safe memset, byte version. Size in bytes. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g9adcd1bdc20c1e011a067a07650436fb"></a>
INLINE void * </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#g9adcd1bdc20c1e011a067a07650436fb">toncset16</a> (void *dst, u16 src, uint count)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">VRAM-safe memset, halfword version. Size in hwords. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="gdb43466c91f6a1e8c5754a77fd3024a2"></a>
INLINE void * </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#gdb43466c91f6a1e8c5754a77fd3024a2">toncset32</a> (void *dst, u32 src, uint count)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">VRAM-safe memset, word version. Size in words. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#g0be2fee65973531d77b37fce46294cd0">memset16</a> (void *dst, u16 hw, uint hwcount)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Fastfill for halfwords, analogous to memset(). <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#g369c27871d42efe1bf61ac4e9e6192c0">memcpy16</a> (void *dst, const void *src, uint hwcount)</td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">IWRAM_CODE void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#g79b00ab4b4cab447be9fed3b14e7fdfa">memset32</a> (void *dst, u32 wd, uint wdcount)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Fast-fill by words, analogous to memset(). <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">IWRAM_CODE void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#g5987b2da78cbae93641e818326c3b55e">memcpy32</a> (void *dst, const void *src, uint wdcount)</td></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><br class="calibre21" /><h2 class="calibre20">Random numbers</h2></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g92bd96a03eb47ff5c4da8ce000b9ab2c"></a>
#define </td><td class="memitemright"><b class="calibre22">QRAN_SHIFT</b>   15</td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g533ae259bbb9fadcd27781a1e28e3d3f"></a>
#define </td><td class="memitemright"><b class="calibre22">QRAN_MASK</b>   ((1&lt;&lt;QRAN_SHIFT)-1)</td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g01e01122848af8b255c9f7f42a27833d"></a>
#define </td><td class="memitemright"><b class="calibre22">QRAN_MAX</b>   QRAN_MASK</td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g429ab3e355986913d688c873437ae09b"></a>
int </td><td class="memitemright"><b class="calibre22">sqran</b> (int seed)</td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">INLINE int </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreMisc.htm#gaeb94625161cb41d4df486e4350521e4">qran</a> (void)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Quick (and very dirty) pseudo-random number generator. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">INLINE int </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreMisc.htm#g5effe2591b87ddbb3c93b40c7a65ede6">qran_range</a> (int min, int max)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Ranged random number. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><br class="calibre21" /><h2 class="calibre20">Defines</h2></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g8392caf15f889bb98a0053f1bfe39b32"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#g8392caf15f889bb98a0053f1bfe39b32">countof</a>(_array)   ( sizeof(_array)/sizeof(_array[0]) )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Get the number of elements in an array. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpDma.htm#ge9914db8a35414a32dcda24f9a5eb0ce">DMA_TRANSFER</a>(_dst, _src, count, ch, mode)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">General purpose DMA transfer macro. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="tonc__core_8h.htm#70e96d72ec4186cf1db1b2497fb4bdce">SND_RATE</a>(note, oct)   ( 2048-(__snd_rates[note]&gt;&gt;(4+(oct))) )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Gives the period of a note for the tone-gen registers. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreMisc.htm#g18d295a837ac71add5578860b55e5502">STR</a>(x)   #x</td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="gbe87b341f562fd1cf40b7672e4d759da"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreMisc.htm#gbe87b341f562fd1cf40b7672e4d759da">XSTR</a>(x)   STR(x)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Create text string from a literal. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><div class="groupheader">Simple bit macros</div></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g3a8ea58898cb58fc96013383d39f482c"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#g3a8ea58898cb58fc96013383d39f482c">BIT</a>(n)   ( 1&lt;&lt;(n) )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Create value with bit <em class="calibre27">n</em> set. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g9f405ad0f48fac0de71a4fdad6302d8d"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#g9f405ad0f48fac0de71a4fdad6302d8d">BIT_SHIFT</a>(a, n)   ( (a)&lt;&lt;(n) )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Shift <em class="calibre27">a</em> by <em class="calibre27">n</em>. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g554ced246cf0ab94852054a9bfa5f45b"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#g554ced246cf0ab94852054a9bfa5f45b">BIT_MASK</a>(len)   ( BIT(len)-1 )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Create a bitmask <em class="calibre27">len</em> bits long. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g8c6ae74f0307ff20ed00182feb73dd02"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#g8c6ae74f0307ff20ed00182feb73dd02">BIT_SET</a>(y, flag)   ( y |= (flag) )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Set the <em class="calibre27">flag</em> bits in <em class="calibre27">word</em>. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="ge76053decf05e22767fa234960673f18"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#ge76053decf05e22767fa234960673f18">BIT_CLEAR</a>(y, flag)   ( y &amp;= ~(flag) )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Clear the <em class="calibre27">flag</em> bits in <em class="calibre27">word</em>. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g61ad99435edf7a76942a5bf92ef3e809"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#g61ad99435edf7a76942a5bf92ef3e809">BIT_FLIP</a>(y, flag)   ( y ^= (flag) )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Flip the <em class="calibre27">flag</em> bits in <em class="calibre27">word</em>. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g4267aa64d870ab4d9329570281dbcc4c"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#g4267aa64d870ab4d9329570281dbcc4c">BIT_EQ</a>(y, flag)   ( ((y)&amp;(flag)) == (flag) )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Test whether all the <em class="calibre27">flag</em> bits in <em class="calibre27">word</em> are set. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="ga9b35f56c6501bccb948b3576fadd4e5"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#ga9b35f56c6501bccb948b3576fadd4e5">BF_MASK</a>(shift, len)   ( BIT_MASK(len)&lt;&lt;(shift) )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Create a bitmask of length <em class="calibre27">len</em> starting at bit <em class="calibre27">shift</em>. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g26ce0c9bb285c8fd508dfb6480ea9b88"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#g26ce0c9bb285c8fd508dfb6480ea9b88">_BF_GET</a>(y, shift, len)   ( ((y)&gt;&gt;(len))&amp;(shift) )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Retrieve a bitfield mask of length <em class="calibre27">starting</em> at bit <em class="calibre27">shift</em> from <em class="calibre27">y</em>. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="gb2b19ad760c2dc2c13218c238f591a9a"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#gb2b19ad760c2dc2c13218c238f591a9a">_BF_PREP</a>(x, shift, len)   ( ((x)&amp;BIT_MASK(len))&lt;&lt;(shift) )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Prepare a bitmask for insertion or combining. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="gf7d92758a47a3738aac0c7886c3bb5e3"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#gf7d92758a47a3738aac0c7886c3bb5e3">_BF_SET</a>(y, x, shift, len)   ( y= ((y) &amp;~ BF_MASK(shift, len)) | _BF_PREP(x, shift, len) )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Insert a new bitfield value <em class="calibre27">x</em> into <em class="calibre27">y</em>. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><div class="groupheader">some EVIL bit-field operations, &gt;:)</div></td></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><div class="grouptext">These allow you to mimic bitfields with macros. Most of the bitfields in the registers have <em class="calibre27">foo</em>_SHIFT and <em class="calibre27">foo</em>_SHIFT macros indicating the mask and shift values of the bitfield named <em class="calibre27">foo</em> in a variable. These macros let you prepare, get and set the bitfields. <br class="calibre21" /><br class="calibre21" /></div></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="gab4904c3bcb2a4b3d80c64d9f9595f95"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#gab4904c3bcb2a4b3d80c64d9f9595f95">BFN_PREP</a>(x, name)   ( ((x)&lt;&lt;name##_SHIFT) &amp; name##_MASK )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Prepare a named bit-field for for insterion or combination. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="gf9c05f7c87a52e2321a3888957719e67"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#gf9c05f7c87a52e2321a3888957719e67">BFN_GET</a>(y, name)   ( ((y) &amp; name##_MASK)&gt;&gt;name##_SHIFT )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Get the value of a named bitfield from <em class="calibre27">y</em>. Equivalent to (var=) y.name. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g932fd2ab5498eaa9999ba05a0c06e971"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#g932fd2ab5498eaa9999ba05a0c06e971">BFN_SET</a>(y, x, name)   (y = ((y)&amp;~name##_MASK) | BFN_PREP(x,name) )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Set a named bitfield in <em class="calibre27">y</em> to <em class="calibre27">x</em>. Equivalent to y.name= x. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="ga1187bcb559c3387fce1fbc747828ddc"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#ga1187bcb559c3387fce1fbc747828ddc">BFN_CMP</a>(y, x, name)   ( ((y)&amp;name##_MASK) == (x) )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Compare a named bitfield to named literal <em class="calibre27">x</em>. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g4dc82662aea29a805b7d76b54e8af2ec"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#g4dc82662aea29a805b7d76b54e8af2ec">BFN_PREP2</a>(x, name)   ( (x) &amp; name##_MASK )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Massage <em class="calibre27">x</em> for use in bitfield <em class="calibre27">name</em> with pre-shifted <em class="calibre27">x</em>. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="ge5eac618bcb48f787c94cc2ebbefbc61"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#ge5eac618bcb48f787c94cc2ebbefbc61">BFN_GET2</a>(y, name)   ( (y) &amp; name##_MASK )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Get the value of bitfield <em class="calibre27">name</em> from <em class="calibre27">y</em>, but don't down-shift. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g04c777d63f2aadbc80cc9c528a3a36a5"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#g04c777d63f2aadbc80cc9c528a3a36a5">BFN_SET2</a>(y, x, name)   ( y = ((y)&amp;~name##_MASK) | BFN_PREP2(x,name) )</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Set bitfield <em class="calibre27">name</em> from <em class="calibre27">y</em> to <em class="calibre27">x</em> with pre-shifted <em class="calibre27">x</em>. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><div class="groupheader">Inline assembly</div></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="gcae0c1c7b28d809fe594e797fd3af1c5"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreMisc.htm#gcae0c1c7b28d809fe594e797fd3af1c5">ASM_CMT</a>(str)   asm volatile("@# " str)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Assembly comment. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="gd803bc8599bf79ad4a80bfa53dd67d10"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreMisc.htm#gd803bc8599bf79ad4a80bfa53dd67d10">ASM_BREAK</a>()   asm volatile("\tmov\t\tr11, r11")</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">No$gba breakpoint. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g645e8c7f89ff5c9822ed9025712accfd"></a>
#define </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreMisc.htm#g645e8c7f89ff5c9822ed9025712accfd">ASM_NOP</a>()   asm volatile("\tnop")</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">No-op; wait a bit. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><br class="calibre21" /><h2 class="calibre20">Enumerations</h2></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">enum  </td><td class="memitemright"><b class="calibre22">eSndNoteId</b> { <br class="calibre21" />
  <b class="calibre22">NOTE_C</b> = 0,
<b class="calibre22">NOTE_CIS</b>,
<b class="calibre22">NOTE_D</b>,
<b class="calibre22">NOTE_DIS</b>,
<br class="calibre21" />
  <b class="calibre22">NOTE_E</b>,
<b class="calibre22">NOTE_F</b>,
<b class="calibre22">NOTE_FIS</b>,
<b class="calibre22">NOTE_G</b>,
<br class="calibre21" />
  <b class="calibre22">NOTE_GIS</b>,
<b class="calibre22">NOTE_A</b>,
<b class="calibre22">NOTE_BES</b>,
<b class="calibre22">NOTE_B</b>
<br class="calibre21" />
}</td></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><br class="calibre21" /><h2 class="calibre20">Functions</h2></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">INLINE u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#gd6e259844fb7a1aeefb8895a13312946">bf_get</a> (u32 y, uint shift, uint len)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Get <em class="calibre27">len</em> long bitfield from <em class="calibre27">y</em>, starting at <em class="calibre27">shift</em>. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">INLINE u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#g85036411a33d75a18555647820b32b67">bf_merge</a> (u32 y, u32 x, uint shift, uint len)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Merge <em class="calibre27">x</em> into an <em class="calibre27">len</em> long bitfield from <em class="calibre27">y</em>, starting at <em class="calibre27">shift</em>. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g040c06a15e0eb895290eb638eab5cbe7"></a>
INLINE u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#g040c06a15e0eb895290eb638eab5cbe7">bf_clamp</a> (int x, uint len)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Clamp <em class="calibre27">to</em> within the range allowed by <em class="calibre27">len</em> bits. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">INLINE int </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#g5cb302a4e8a431b08b8b4a280886ebb3">bit_tribool</a> (u32 flags, uint plus, uint minus)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Gives a tribool (-1, 0, or +1) depending on the state of some bits. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g1e0b242dbe5e7c56cb43177b211a022f"></a>
INLINE u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreBit.htm#g1e0b242dbe5e7c56cb43177b211a022f">ROR</a> (u32 x, uint ror)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Rotate bits right. Yes, this does lead to a ror instruction. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="gcdf972996a4ca01337da5c25824e5f2e"></a>
INLINE uint </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#gcdf972996a4ca01337da5c25824e5f2e">align</a> (uint x, uint width)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Align <em class="calibre27">x</em> to the next multiple of <em class="calibre27">width</em>. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">INLINE void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpDma.htm#g336e7bfa9fa94dd29a33af4e8273f0a2">dma_cpy</a> (void *dst, const void *src, uint count, uint ch, u32 mode)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Generic DMA copy routine. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">INLINE void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpDma.htm#gfefeab8c6bbfc4be1df81bece4bc72cc">dma_fill</a> (void *dst, volatile u32 src, uint count, uint ch, u32 mode)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Generic DMA fill routine. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">INLINE void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpDma.htm#g82d4c3a041ffb35c8f97109d09211bed">dma3_cpy</a> (void *dst, const void *src, uint size)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Specific DMA copier, using channel 3, word transfers. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">INLINE void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpDma.htm#g5c791a85ffc650e71dd0f699b1bc1b4c">dma3_fill</a> (void *dst, volatile u32 src, uint size)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Specific DMA filler, using channel 3, word transfers. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">INLINE void </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpTimer.htm#ge8cb66eb4453b22b5eb31262c19517cc">profile_start</a> (void)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Start a profiling run. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">INLINE uint </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpTimer.htm#g50861fa69ac898d296233e44810a1a6c">profile_stop</a> (void)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Stop a profiling run and return the time since its start. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><div class="groupheader">Repeated-value creators</div></td></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><div class="grouptext">These function take a hex-value and duplicate it to all fields, like 0x88 -&gt; 0x88888888. <br class="calibre21" /><br class="calibre21" /></div></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g4f001c899e36a8c9472ccbe5adda2d32"></a>
INLINE u16 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#g4f001c899e36a8c9472ccbe5adda2d32">dup8</a> (u8 x)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Duplicate a byte to form a halfword: 0x12 -&gt; 0x1212. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g410b282de0ebf70ef74bd1c688bb588f"></a>
INLINE u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#g410b282de0ebf70ef74bd1c688bb588f">dup16</a> (u16 x)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Duplicate a halfword to form a word: 0x1234 -&gt; 0x12341234. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="g4b3f7f02a73f46cc3746fd7972fb286a"></a>
INLINE u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#g4b3f7f02a73f46cc3746fd7972fb286a">quad8</a> (u8 x)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Quadruple a byte to form a word: 0x12 -&gt; 0x12121212. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="ga72bc748f74c4e698ae03cb30f5d1d61"></a>
INLINE u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#ga72bc748f74c4e698ae03cb30f5d1d61">octup</a> (u8 x)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Octuple a nybble to form a word: 0x1 -&gt; 0x11111111. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><div class="groupheader">Packing routines.</div></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="ga900c584476b80cbd9df6108c8a8d1f8"></a>
INLINE u16 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#ga900c584476b80cbd9df6108c8a8d1f8">bytes2hword</a> (u8 b0, u8 b1)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Pack 2 bytes into a word. Little-endian order. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="gf46d9d06c96ba4f4bc992bf4d1af4b36"></a>
INLINE u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#gf46d9d06c96ba4f4bc992bf4d1af4b36">bytes2word</a> (u8 b0, u8 b1, u8 b2, u8 b3)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Pack 4 bytes into a word. Little-endian order. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="ga5bc6af26ab0295d328e896d28f75dd6"></a>
INLINE u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpData.htm#ga5bc6af26ab0295d328e896d28f75dd6">hword2word</a> (u16 h0, u16 h1)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Pack 2 bytes into a word. Little-endian order. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><div class="groupheader">Sector checking</div></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreMisc.htm#g617876a8605b09a29701d11cfdf77708">octant</a> (int x, int y)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Get the octant that (<em class="calibre27">x</em>, <em class="calibre27">y</em>) is in. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap">u32 </td><td class="memitemright"><a class="pcalibre5 el pcalibre6" href="group__grpCoreMisc.htm#gb78dad986ad4be897d473b8c5dd4f162">octant_rot</a> (int x0, int y0)</td></tr>
<tr class="calibre18"><td class="mdescleft"> </td><td class="mdescleft">Get the rotated octant that (<em class="calibre27">x</em>, <em class="calibre27">y</em>) is in. <br class="calibre21" /></td></tr>
<tr class="calibre18"><td colspan="2" class="calibre19"><br class="calibre21" /><h2 class="calibre20">Variables</h2></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="3b64a03e752ed5aa67ab8f46401fa4eb"></a>
const uint </td><td class="memitemright"><b class="calibre22">__snd_rates</b> [12]</td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="3f940986dd7be09e313b2309f171fccf"></a>
const u8 </td><td class="memitemright"><b class="calibre22">oam_sizes</b> [3][4][2]</td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="43928c0885eec3630d35e287d56fad32"></a>
const <a class="pcalibre5 el pcalibre6" href="group__grpTypeTert.htm#gbd684ef1bcc16437414d6f59f72572ac">BG_AFFINE</a> </td><td class="memitemright"><b class="calibre22">bg_aff_default</b></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="6dd397a8055d175c44ea34c986e6b4e9"></a>
<a class="pcalibre5 el pcalibre6" href="group__grpTypeSec.htm#g3f7d6a7047d3cc1d04a6a1e10d7fdb00">COLOR</a> * </td><td class="memitemright"><b class="calibre22">vid_page</b></td></tr>
<tr class="calibre18"><td class="memitemleft" nowrap="nowrap"><a class="pcalibre5 pcalibre6 calibre8" name="04d9da793c804c34a9a9c831df4aa769"></a>
int </td><td class="memitemright"><b class="calibre22">__qran_seed</b></td></tr>
</table>
<hr class="calibre9" /><a name="_details" class="pcalibre5 pcalibre6 calibre8"></a><h2 class="calibre20">Detailed Description</h2>
<dl class="calibre7" compact="compact"><dt class="calibre21"><b class="calibre22">Author:</b></dt><dd class="calibre23">J Vijn </dd></dl>
<dl class="calibre7" compact="compact"><dt class="calibre21"><b class="calibre22">Date:</b></dt><dd class="calibre23">20060508 - 20080128 </dd></dl>
<hr class="calibre9" /><h2 class="calibre20">Define Documentation</h2>
<a class="pcalibre5 pcalibre6 calibre8" name="70e96d72ec4186cf1db1b2497fb4bdce"></a>
<div class="memitem">
<div class="memproto">
<table class="memname">
<tr class="calibre18">
<td class="memname1">#define SND_RATE </td>
<td class="calibre19">(</td>
<td class="paramtype">note, </td></tr><tr class="calibre18">
<td class="paramkey" />
<td class="calibre19" />
<td class="paramtype">oct </td>
<td class="paramname"> </td>
<td class="calibre19"> ) </td>
<td width="100%" class="calibre19">   ( 2048-(__snd_rates[note]&gt;&gt;(4+(oct))) )</td>
</tr>
</table>
</div>
<div class="memdoc">
<p class="calibre7">
Gives the period of a note for the tone-gen registers.
</p><p class="calibre7">
GBA sound range: 8 octaves: [-2, 5]; 8*12= 96 notes (kinda). <dl compact="compact" class="calibre7"><dt class="calibre21"><b class="calibre22">Parameters:</b></dt><dd class="calibre23">
<table border="0" cellspacing="2" cellpadding="0" class="calibre17">
<tr class="calibre18"><td class="calibre26" /><td class="calibre26"><em class="calibre27">note</em> </td><td class="calibre19">ID (range: [0,11&gt;). See eSndNoteId. </td></tr>
<tr class="calibre18"><td class="calibre26" /><td class="calibre26"><em class="calibre27">oct</em> </td><td class="calibre19">octave (range [-2,4)&gt;). </td></tr>
</table>
</dd></dl>
</p></div>
</div><p class="calibre7">
<hr size="1" class="calibre9" /><address class="calibre10"><small class="calibre11">Generated on Mon Aug 25 17:03:56 2008 for libtonc by 
<a href="http://www.doxygen.org/index.html" class="pcalibre5 pcalibre6 calibre8">
<img src="doxygen.png" alt="doxygen" border="0" class="calibre12" /></a> 1.5.3 </small></address>
</p>
</div>
<div class="calibreEbNav">
<a href="tonc__core_8c.htm" class="calibreAPrev">previous page</a>
<a href="index.html" class="calibreAHome"> start</a>
<a href="tonc__input_8c.htm" class="calibreANext"> next page</a>
</div>
</div>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js" type="7e6d58c848246f96dae0f3c7-text/javascript"></script>

<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-0545639743190253" data-ad-slot="2889760833" data-ad-format="auto"></ins>
<script type="7e6d58c848246f96dae0f3c7-text/javascript">
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</table>
</div>
</section>

</div>
</div>


<div id="sidebar">
<div class="inner">


<nav id="menu">
<header class="major">
<h2>Menu</h2>
</header>
<ul>
<li><a href="https://documentation.help/">Homepage</a></li> 
</ul>
<div><div class="calibreTocIndex">
<h2> Table of contents</h2>
<div>
<ul>
<li>
<a href="main.htm">Tonclib 1.4 (20080825)</a>
</li>
<li>
<a href="modules.htm">Modules</a>
<ul>
<li>
<a href="group__grpBios.htm">Bios Calls</a>
<ul>
<li>
<a href="group__grpBiosDef.htm">BIOS informalities</a>
</li>
<li>
<a href="group__grpBiosMain.htm">BIOS functions</a>
</li>
<li>
<a href="group__grpBiosEx.htm">More BIOS functions</a>
</li>
</ul>
</li>
<li>
<a href="group__grpCore.htm">Core</a>
<ul>
<li>
<a href="group__grpCoreBit.htm">Bit(field) macros</a>
</li>
<li>
<a href="group__grpData.htm">Data routines</a>
</li>
<li>
<a href="group__grpCoreMisc.htm">Miscellaneous routines</a>
</li>
<li>
<a href="group__grpNocash.htm">no$gba debugging</a>
</li>
</ul>
</li>
<li>
<a href="group__grpDma.htm">DMA</a>
</li>
<li>
<a href="group__grpInput.htm">Input</a>
</li>
<li>
<a href="group__grpIrq.htm">Interrupt</a>
</li>
<li>
<a href="group__grpMath.htm">Math</a>
<ul>
<li>
<a href="group__grpMathBase.htm">Base math</a>
</li>
<li>
<a href="group__grpMathFixed.htm">Fixed point math</a>
</li>
<li>
<a href="group__grpMathLut.htm">Look-up tables</a>
</li>
<li>
<a href="group__grpMathPoint.htm">Point functions</a>
</li>
<li>
<a href="group__grpMathVector.htm">Vector functions</a>
</li>
<li>
<a href="group__grpMathRect.htm">Rect functions</a>
</li>
</ul>
</li>
<li>
<a href="group__grpMemmap.htm">Memory Map</a>
<ul>
<li>
<a href="group__grpMemBits.htm">Memory map bit(fields)</a>
<ul>
<li>
<a href="group__grpVideoDCNT.htm">Display Control Flags</a>
</li>
<li>
<a href="group__grpVideoDSTAT.htm">Display Status Flags</a>
</li>
<li>
<a href="group__grpVideoBGCNT.htm">Background Control Flags</a>
</li>
<li>
<a href="group__grpVideoGfx.htm">Graphic effects</a>
</li>
<li>
<a href="group__grpVideoBLD.htm">Blend Flags</a>
</li>
<li>
<a href="group__grpAudioSSW.htm">Tone Generator, Sweep Flags</a>
</li>
<li>
<a href="group__grpAudioSSQR.htm">Tone Generator, Square Flags</a>
</li>
<li>
<a href="group__grpAudioSFREQ.htm">Tone Generator, Frequency Flags</a>
</li>
<li>
<a href="group__grpAudioSDMG.htm">Tone Generator, Control Flags</a>
</li>
<li>
<a href="group__grpAudioSDS.htm">Direct Sound Flags</a>
</li>
<li>
<a href="group__grpAudioSSTAT.htm">Sound Status Flags</a>
</li>
<li>
<a href="group__grpAudioDMA.htm">DMA Control Flags</a>
</li>
<li>
<a href="group__grpTimerTM.htm">Timer Control Flags</a>
</li>
<li>
<a href="group__grpSioCnt.htm">Serial I/O Control</a>
</li>
<li>
<a href="group__grpCommR.htm">Comm control.</a>
</li>
<li>
<a href="group__grpInputKEY.htm">Key Flags</a>
</li>
<li>
<a href="group__grpInputKCNT.htm">Key Control Flags</a>
</li>
<li>
<a href="group__grpIrqIRQ.htm">Interrupt Flags</a>
</li>
<li>
<a href="group__grpMiscWS.htm">Waitstate Control Flags</a>
</li>
<li>
<a href="group__grpVideoSE.htm">Screen-entry Flags</a>
</li>
<li>
<a href="group__grpVideoAttr0.htm">Object Attribute 0 Flags</a>
</li>
<li>
<a href="group__grpVideoAttr1.htm">Object Attribute 1 Flags</a>
</li>
<li>
<a href="group__grpVideoAttr2.htm">Object Attribute 2 Flags</a>
</li>
</ul>
</li>
<li>
<a href="group__grpMemArray.htm">Memory mapped arrays</a>
</li>
<li>
<a href="group__grpReg.htm">IO Registers</a>
</li>
<li>
<a href="group__grpRegAlt.htm">IO Alternates</a>
</li>
</ul>
</li>
<li>
<a href="group__grpAudio.htm">Sound</a>
</li>
<li>
<a href="group__grpTTE.htm">Tonc Text Engine</a>
<ul>
<li>
<a href="group__grpTTEOps.htm">Operations</a>
</li>
<li>
<a href="group__grpTTEAttr.htm">Attributes</a>
</li>
<li>
<a href="group__grpTTEConio.htm">Console IO</a>
</li>
<li>
<a href="group__grpTTEMap.htm">Tilemap text</a>
</li>
<li>
<a href="group__grpTTEChr4c.htm">Character text, column-major</a>
</li>
<li>
<a href="group__grpTTEChr4r.htm">Character text, row-major</a>
</li>
<li>
<a href="group__grpTTEBmp.htm">Bitmap text</a>
</li>
<li>
<a href="group__grpTTEObj.htm">Object text</a>
</li>
</ul>
</li>
<li>
<a href="group__grpText.htm">Old Text</a>
<ul>
<li>
<a href="group__grpTextTile.htm">Tilemap text</a>
</li>
<li>
<a href="group__grpTextBm.htm">Bitmap text</a>
</li>
<li>
<a href="group__grpTextObj.htm">Object text</a>
</li>
</ul>
</li>
<li>
<a href="group__grpTimer.htm">Timer</a>
</li>
<li>
<a href="group__grpVideo.htm">Video</a>
<ul>
<li>
<a href="group__grpSurface.htm">Surface functions</a>
<ul>
<li>
<a href="group__grpSbmp16.htm">16bpp bitmap surfaces</a>
</li>
<li>
<a href="group__grpSbmp8.htm">8bpp bitmap surfaces</a>
</li>
<li>
<a href="group__grpSchr4c.htm">4bpp tiled surfaces, column major</a>
</li>
<li>
<a href="group__grpSchr4r.htm">4bpp tiled surfaces, row major</a>
</li>
</ul>
</li>
<li>
<a href="group__grpVideoPal.htm">Colors</a>
</li>
<li>
<a href="group__grpVideoBg.htm">Tiled Backgrounds</a>
</li>
<li>
<a href="group__grpVideoBmp.htm">Bitmaps</a>
</li>
<li>
<a href="group__grpVideoObj.htm">Objects</a>
</li>
<li>
<a href="group__grpVideoAffine.htm">Affine functions</a>
</li>
</ul>
</li>
<li>
<a href="group__grpTypes.htm">Types and attributes</a>
<ul>
<li>
<a href="group__grpTypeAttr.htm">Type attributes</a>
</li>
<li>
<a href="group__grpTypePrim.htm">Primary types</a>
</li>
<li>
<a href="group__grpTypeSec.htm">Secondary types</a>
</li>
<li>
<a href="group__grpTypeTert.htm">Tertiary types</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="annotated.htm">Data Structures</a>
<ul>
<li>
<a href="structBG__POINT.htm">BG_POINT</a>
</li>
<li>
<a href="structBgAffineDest.htm">BgAffineDest</a>
</li>
<li>
<a href="structBgAffineSource.htm">BgAffineSource</a>
</li>
<li>
<a href="structBLOCK.htm">BLOCK</a>
</li>
<li>
<a href="structBUP.htm">BUP</a>
</li>
<li>
<a href="structDMA__REC.htm">DMA_REC</a>
</li>
<li>
<a href="structIRQ__REC.htm">IRQ_REC</a>
</li>
<li>
<a href="structIRQ__SENDER.htm">IRQ_SENDER</a>
</li>
<li>
<a href="structMultiBootParam.htm">MultiBootParam</a>
</li>
<li>
<a href="structOBJ__AFFINE.htm">OBJ_AFFINE</a>
</li>
<li>
<a href="structOBJ__ATTR.htm">OBJ_ATTR</a>
</li>
<li>
<a href="structObjAffineDest.htm">ObjAffineDest</a>
</li>
<li>
<a href="structObjAffineSource.htm">ObjAffineSource</a>
</li>
<li>
<a href="structPOINT32.htm">POINT32</a>
</li>
<li>
<a href="structRECT32.htm">RECT32</a>
</li>
<li>
<a href="structREPEAT__REC.htm">REPEAT_REC</a>
</li>
<li>
<a href="structTFont.htm">TFont</a>
</li>
<li>
<a href="structTILE.htm">TILE</a>
</li>
<li>
<a href="structTILE8.htm">TILE8</a>
</li>
<li>
<a href="structTMR__REC.htm">TMR_REC</a>
</li>
<li>
<a href="structTTC.htm">TTC</a>
</li>
<li>
<a href="structVECTOR.htm">VECTOR</a>
</li>
</ul>
</li>
<li>
<a href="functions.htm">Data Fields</a>
</li>
<li>
<a href="files.htm">File List</a>
<ul>
<li>
<a href="ase__drawg_8c.htm">ase_drawg.c</a>
</li>
<li>
<a href="bmp16__drawg_8c.htm">bmp16_drawg.c</a>
</li>
<li>
<a href="bmp16__drawg__b1cs_8c.htm">bmp16_drawg_b1cs.c</a>
</li>
<li>
<a href="bmp8__drawg_8c.htm">bmp8_drawg.c</a>
</li>
<li>
<a href="bmp8__drawg__b1cs_8c.htm">bmp8_drawg_b1cs.c</a>
</li>
<li>
<a href="chr4c__drawg__b1cts_8c.htm">chr4c_drawg_b1cts.c</a>
</li>
<li>
<a href="chr4c__drawg__b4cts_8c.htm">chr4c_drawg_b4cts.c</a>
</li>
<li>
<a href="chr4r__drawg__b1cts_8c.htm">chr4r_drawg_b1cts.c</a>
</li>
<li>
<a href="obj__drawg_8c.htm">obj_drawg.c</a>
</li>
<li>
<a href="se__drawg_8c.htm">se_drawg.c</a>
</li>
<li>
<a href="tonc_8h.htm">tonc.h</a>
</li>
<li>
<a href="tonc__bg_8c.htm">tonc_bg.c</a>
</li>
<li>
<a href="tonc__bg__affine_8c.htm">tonc_bg_affine.c</a>
</li>
<li>
<a href="tonc__bios_8h.htm">tonc_bios.h</a>
</li>
<li>
<a href="tonc__bmp16_8c.htm">tonc_bmp16.c</a>
</li>
<li>
<a href="tonc__bmp8_8c.htm">tonc_bmp8.c</a>
</li>
<li>
<a href="tonc__color_8c.htm">tonc_color.c</a>
</li>
<li>
<a href="tonc__core_8c.htm">tonc_core.c</a>
</li>
<li>
<a href="tonc__core_8h.htm">tonc_core.h</a>
</li>
<li>
<a href="tonc__input_8c.htm">tonc_input.c</a>
</li>
<li>
<a href="tonc__input_8h.htm">tonc_input.h</a>
</li>
<li>
<a href="tonc__irq_8c.htm">tonc_irq.c</a>
</li>
<li>
<a href="tonc__irq_8h.htm">tonc_irq.h</a>
</li>
<li>
<a href="tonc__legacy_8h.htm">tonc_legacy.h</a>
</li>
<li>
<a href="tonc__libgba_8h.htm">tonc_libgba.h</a>
</li>
<li>
<a href="tonc__math_8c.htm">tonc_math.c</a>
</li>
<li>
<a href="tonc__math_8h.htm">tonc_math.h</a>
</li>
<li>
<a href="tonc__memdef_8h.htm">tonc_memdef.h</a>
</li>
<li>
<a href="tonc__memmap_8h.htm">tonc_memmap.h</a>
</li>
<li>
<a href="tonc__nocash_8h.htm">tonc_nocash.h</a>
</li>
<li>
<a href="tonc__oam_8c.htm">tonc_oam.c</a>
</li>
<li>
<a href="tonc__oam_8h.htm">tonc_oam.h</a>
</li>
<li>
<a href="tonc__obj__affine_8c.htm">tonc_obj_affine.c</a>
</li>
<li>
<a href="tonc__sbmp16_8c.htm">tonc_sbmp16.c</a>
</li>
<li>
<a href="tonc__sbmp8_8c.htm">tonc_sbmp8.c</a>
</li>
<li>
<a href="tonc__schr4c_8c.htm">tonc_schr4c.c</a>
</li>
<li>
<a href="tonc__schr4r_8c.htm">tonc_schr4r.c</a>
</li>
<li>
<a href="tonc__surface_8c.htm">tonc_surface.c</a>
</li>
<li>
<a href="tonc__surface_8h.htm">tonc_surface.h</a>
</li>
<li>
<a href="tonc__text_8h.htm">tonc_text.h</a>
</li>
<li>
<a href="tonc__tte_8h.htm">tonc_tte.h</a>
</li>
<li>
<a href="tonc__types_8h.htm">tonc_types.h</a>
</li>
<li>
<a href="tonc__video_8c.htm">tonc_video.c</a>
</li>
<li>
<a href="tonc__video_8h.htm">tonc_video.h</a>
</li>
<li>
<a href="tte__init__ase_8c.htm">tte_init_ase.c</a>
</li>
<li>
<a href="tte__init__bmp_8c.htm">tte_init_bmp.c</a>
</li>
<li>
 <a href="tte__init__chr4c_8c.htm">tte_init_chr4c.c</a>
</li>
<li>
<a href="tte__init__chr4r_8c.htm">tte_init_chr4r.c</a>
</li>
<li>
<a href="tte__init__obj_8c.htm">tte_init_obj.c</a>
</li>
<li>
<a href="tte__init__se_8c.htm">tte_init_se.c</a>
</li>
<li>
<a href="tte__iohook_8c.htm">tte_iohook.c</a>
</li>
<li>
<a href="tte__main_8c.htm">tte_main.c</a>
</li>
</ul>
</li>
<li>
<a href="globals.htm">Globals</a>
</li>
<li>
<a href="pages.htm">Related Pages</a>
<ul>
<li>
<a href="todo.htm">Todo List</a>
</li>
<li>
<a href="deprecated.htm">Deprecated List</a>
</li>
</ul>
</li>
</ul>
</div>
</div>
</div>
</nav>


<section>
<header class="major">
<h2>Get in touch</h2>
</header>
<p>Submit feedback about this site to:</p>
 <ul class="contact">
<li class="fa-envelope-o"><a href="https://documentation.help/cdn-cgi/l/email-protection#ea828f869a8e858999aa988f82878b8484c48985"><span class="__cf_email__" data-cfemail="6b030e071b0f0408182b190e03060a0505450804">[email&#160;protected]</span></a></li>
</ul>
</section>

<footer id="footer">
<p class="copyright">&copy; <a href="https://documentation.help">documentation.help</a>. Design: <a href="https://rehmann.co">rehmann.co</a>.</p>
<ul class="icons">

</ul>
</footer>
</div>
</div>
</div>

<script data-cfasync="false" src="../cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script src="../assets/js/jquery.min.js" type="7e6d58c848246f96dae0f3c7-text/javascript"></script>
<script src="../assets/js/skel.min.js" type="7e6d58c848246f96dae0f3c7-text/javascript"></script>
<script src="../assets/js/util.js" type="7e6d58c848246f96dae0f3c7-text/javascript"></script>
<!--[if lte IE 8]><script src="assets/js/ie/respond.min.js"></script><![endif]-->
<script src="../assets/js/main.js" type="7e6d58c848246f96dae0f3c7-text/javascript"></script>
<script src="https://ajax.cloudflare.com/cdn-cgi/scripts/7089c43e/cloudflare-static/rocket-loader.min.js" data-cf-settings="7e6d58c848246f96dae0f3c7-|49" defer=""></script></body>
</html>
